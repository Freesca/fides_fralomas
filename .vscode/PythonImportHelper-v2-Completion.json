[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Condition",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "pong_game_ws.routing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pong_game_ws.routing",
        "description": "pong_game_ws.routing",
        "detail": "pong_game_ws.routing",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "UniqueValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "RetrieveUpdateDestroyAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "pyotp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyotp",
        "description": "pyotp",
        "detail": "pyotp",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "register_user",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def register_user():\n    \"\"\"Registra un utente.\"\"\"\n    print(\"Registrazione utente\")\n    email = input(\"Inserisci l'email: \")\n    username = input(\"Inserisci lo username: \")\n    password = input(\"Inserisci la password: \")\n    password_confirm = input(\"Conferma la password: \")\n    url = f\"{BASE_URL}/register/\"\n    data = {\n        \"email\": email,",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def login_user():\n    \"\"\"Effettua il login e restituisce i token.\"\"\"\n    print(\"Login utente\")\n    username = input(\"Inserisci l'username: \")\n    password = input(\"Inserisci la password: \")\n    url = f\"{BASE_URL}/login/\"\n    data = {\n        \"username\": username,\n        \"password\": password\n    }",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "verify_otp",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def verify_otp():\n    \"\"\"Verifica il codice OTP e salva i token.\"\"\"\n    print(\"Verifica del codice OTP\")\n    email = input(\"Inserisci l'email per la verifica OTP: \")\n    otp_code = input(\"Inserisci il codice OTP: \")\n    url = f\"{BASE_URL}/verify-otp/\"\n    data = {\n        \"email\": email,\n        \"otp_code\": otp_code\n    }",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "get_with_auth",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def get_with_auth(endpoint, token):\n    \"\"\"Effettua una richiesta GET con autorizzazione Bearer.\"\"\"\n    url = f\"{BASE_URL}/{endpoint}\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n    response = requests.get(url, headers=headers)\n    return response\ndef refresh_access_token(refresh_token):\n    \"\"\"Richiede un nuovo access token utilizzando il refresh token.\"\"\"",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "refresh_access_token",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def refresh_access_token(refresh_token):\n    \"\"\"Richiede un nuovo access token utilizzando il refresh token.\"\"\"\n    url = f\"{BASE_URL}/token_refresh/\"\n    data = {\"refresh\": refresh_token}\n    response = requests.post(url, json=data)\n    if response.status_code == 200:\n        new_access_token = response.json().get(\"access\")\n        print(\"Nuovo access token ricevuto:\", new_access_token)\n        return new_access_token\n    else:",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "send_matchmaking_request",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def send_matchmaking_request(password, token):\n    \"\"\"Invia una richiesta di matchmaking con una password.\"\"\"\n    url = f\"{MATCH_URL}/match/private-password/\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n    data = {\"password\": password}\n    response = requests.post(url, json=data, headers=headers, timeout=65)\n    if response.status_code == 200:\n        print(\"Risposta matchmaking:\", response.json())",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "patch_with_auth",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def patch_with_auth(endpoint, token, data):\n    \"\"\"Effettua una richiesta PATCH con autorizzazione Bearer.\"\"\"\n    url = f\"{BASE_URL}/{endpoint}\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n    response = requests.patch(url, json=data, headers=headers)\n    return response\ndef main():\n    print(\"Benvenuto! Scegli un'opzione:\")",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def main():\n    print(\"Benvenuto! Scegli un'opzione:\")\n    choice = input(\"Vuoi registrarti o fare il login? (register/login): \").strip().lower()\n    if choice == \"register\":\n        # Registrazione utente\n        if not register_user():\n            print(\"Registrazione fallita. Interrompo il processo.\")\n            return\n        # Verifica OTP e recupero dei token\n        tokens = verify_otp()",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "BASE_URL = \"http://localhost:8000\"  # Modifica con l'URL del tuo microservizio\nMATCH_URL = \"http://localhost:8001\"  # Modifica con l'URL del tuo microservizio\nSCREEN_WIDTH, SCREEN_HEIGHT = 800, 600\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nBALL_SIZE = 20\nPADDLE_WIDTH, PADDLE_HEIGHT = 20, 100\ndef register_user():\n    \"\"\"Registra un utente.\"\"\"\n    print(\"Registrazione utente\")",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "MATCH_URL",
        "kind": 5,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "MATCH_URL = \"http://localhost:8001\"  # Modifica con l'URL del tuo microservizio\nSCREEN_WIDTH, SCREEN_HEIGHT = 800, 600\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nBALL_SIZE = 20\nPADDLE_WIDTH, PADDLE_HEIGHT = 20, 100\ndef register_user():\n    \"\"\"Registra un utente.\"\"\"\n    print(\"Registrazione utente\")\n    email = input(\"Inserisci l'email: \")",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nBALL_SIZE = 20\nPADDLE_WIDTH, PADDLE_HEIGHT = 20, 100\ndef register_user():\n    \"\"\"Registra un utente.\"\"\"\n    print(\"Registrazione utente\")\n    email = input(\"Inserisci l'email: \")\n    username = input(\"Inserisci lo username: \")\n    password = input(\"Inserisci la password: \")",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "BLACK = (0, 0, 0)\nBALL_SIZE = 20\nPADDLE_WIDTH, PADDLE_HEIGHT = 20, 100\ndef register_user():\n    \"\"\"Registra un utente.\"\"\"\n    print(\"Registrazione utente\")\n    email = input(\"Inserisci l'email: \")\n    username = input(\"Inserisci lo username: \")\n    password = input(\"Inserisci la password: \")\n    password_confirm = input(\"Conferma la password: \")",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "BALL_SIZE",
        "kind": 5,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "BALL_SIZE = 20\nPADDLE_WIDTH, PADDLE_HEIGHT = 20, 100\ndef register_user():\n    \"\"\"Registra un utente.\"\"\"\n    print(\"Registrazione utente\")\n    email = input(\"Inserisci l'email: \")\n    username = input(\"Inserisci lo username: \")\n    password = input(\"Inserisci la password: \")\n    password_confirm = input(\"Conferma la password: \")\n    url = f\"{BASE_URL}/register/\"",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.asgi",
        "description": "matchmaking_microservice.mtcmkg.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "matchmaking_microservice.mtcmkg.asgi",
        "documentation": {}
    },
    {
        "label": "NoMigrations",
        "kind": 6,
        "importPath": "matchmaking_microservice.mtcmkg.nomigrations",
        "description": "matchmaking_microservice.mtcmkg.nomigrations",
        "peekOfCode": "class NoMigrations:\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):\n        return None\nMIGRATION_MODULES = NoMigrations()",
        "detail": "matchmaking_microservice.mtcmkg.nomigrations",
        "documentation": {}
    },
    {
        "label": "MIGRATION_MODULES",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.nomigrations",
        "description": "matchmaking_microservice.mtcmkg.nomigrations",
        "peekOfCode": "MIGRATION_MODULES = NoMigrations()",
        "detail": "matchmaking_microservice.mtcmkg.nomigrations",
        "documentation": {}
    },
    {
        "label": "MIGRATION_MODULES",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "MIGRATION_MODULES = NoMigrations()\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-9j4$inw$nbvai8wsq@49f6f*z((^*m28xji1w=e185%7ekr(#p'\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-9j4$inw$nbvai8wsq@49f6f*z((^*m28xji1w=e185%7ekr(#p'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-9j4$inw$nbvai8wsq@49f6f*z((^*m28xji1w=e185%7ekr(#p'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-9j4$inw$nbvai8wsq@49f6f*z((^*m28xji1w=e185%7ekr(#p'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework_simplejwt',\n    'rest_framework_simplejwt.token_blacklist',",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'mtcmkg.urls'",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "ROOT_URLCONF = 'mtcmkg.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "WSGI_APPLICATION = 'mtcmkg.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',  # Nome predefinito o il nome specificato su Supabase\n        'USER': 'postgres.ggbckomtbwupqqvjasap',  # Nome utente fornito da Supabase\n        'PASSWORD': 'GokuSuperSaiyan4',\n        'HOST': 'aws-0-eu-central-2.pooler.supabase.com',",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',  # Nome predefinito o il nome specificato su Supabase\n        'USER': 'postgres.ggbckomtbwupqqvjasap',  # Nome utente fornito da Supabase\n        'PASSWORD': 'GokuSuperSaiyan4',\n        'HOST': 'aws-0-eu-central-2.pooler.supabase.com',\n        'PORT': '6543',\n    }\n}",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mtcmkg_api.PongUser'",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mtcmkg_api.PongUser'\nREST_FRAMEWORK = {",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mtcmkg_api.PongUser'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mtcmkg_api.PongUser'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mtcmkg_api.PongUser'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'mtcmkg_api.PongUser'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': env('SIGNING_KEY'),\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'JTI_CLAIM': 'jti',",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.settings",
        "description": "matchmaking_microservice.mtcmkg.settings",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/1\",  # Porta predefinita e database 1\n    }\n}",
        "detail": "matchmaking_microservice.mtcmkg.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.urls",
        "description": "matchmaking_microservice.mtcmkg.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('match/', include('mtcmkg_api.urls', namespace='mtcmkg_api')),\n]",
        "detail": "matchmaking_microservice.mtcmkg.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg.wsgi",
        "description": "matchmaking_microservice.mtcmkg.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "matchmaking_microservice.mtcmkg.wsgi",
        "documentation": {}
    },
    {
        "label": "MtcmkgApiConfig",
        "kind": 6,
        "importPath": "matchmaking_microservice.mtcmkg_api.apps",
        "description": "matchmaking_microservice.mtcmkg_api.apps",
        "peekOfCode": "class MtcmkgApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'mtcmkg_api'",
        "detail": "matchmaking_microservice.mtcmkg_api.apps",
        "documentation": {}
    },
    {
        "label": "PongUser",
        "kind": 6,
        "importPath": "matchmaking_microservice.mtcmkg_api.models",
        "description": "matchmaking_microservice.mtcmkg_api.models",
        "peekOfCode": "class PongUser(AbstractUser):\n    class Meta:\n        managed = False  # Evita che Django gestisca questa tabella\n        db_table = 'user_mgmt_api_ponguser'\n    otp_secret = models.CharField(max_length=32, blank=True, null=True)\n    trophies = models.IntegerField(default=0)\n    last_activity = models.DateTimeField(null=True, blank=True)\n    def __str__(self):\n        return self.username",
        "detail": "matchmaking_microservice.mtcmkg_api.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg_api.urls",
        "description": "matchmaking_microservice.mtcmkg_api.urls",
        "peekOfCode": "app_name = 'mtcmkg_api'\nurlpatterns = [\n    path('private-password/', PongPrivatePasswordMatchView.as_view(), name='private_password'),\n]",
        "detail": "matchmaking_microservice.mtcmkg_api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg_api.urls",
        "description": "matchmaking_microservice.mtcmkg_api.urls",
        "peekOfCode": "urlpatterns = [\n    path('private-password/', PongPrivatePasswordMatchView.as_view(), name='private_password'),\n]",
        "detail": "matchmaking_microservice.mtcmkg_api.urls",
        "documentation": {}
    },
    {
        "label": "PongPrivatePasswordMatchView",
        "kind": 6,
        "importPath": "matchmaking_microservice.mtcmkg_api.views",
        "description": "matchmaking_microservice.mtcmkg_api.views",
        "peekOfCode": "class PongPrivatePasswordMatchView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        password = request.data.get(\"password\")\n        if not password:\n            return Response({\"detail\": \"Password is required\"}, status=400)\n        game_id_key = f\"game_id_{password}\"\n        if cache.get(game_id_key):  # Giocatore 2 trova il game_id\n            game_id = cache.get(game_id_key)\n            cache.delete(game_id_key)",
        "detail": "matchmaking_microservice.mtcmkg_api.views",
        "documentation": {}
    },
    {
        "label": "get_condition",
        "kind": 2,
        "importPath": "matchmaking_microservice.mtcmkg_api.views",
        "description": "matchmaking_microservice.mtcmkg_api.views",
        "peekOfCode": "def get_condition(password):\n    if password not in conditions:\n        conditions[password] = Condition()\n    return conditions[password]\nclass PongPrivatePasswordMatchView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        password = request.data.get(\"password\")\n        if not password:\n            return Response({\"detail\": \"Password is required\"}, status=400)",
        "detail": "matchmaking_microservice.mtcmkg_api.views",
        "documentation": {}
    },
    {
        "label": "conditions",
        "kind": 5,
        "importPath": "matchmaking_microservice.mtcmkg_api.views",
        "description": "matchmaking_microservice.mtcmkg_api.views",
        "peekOfCode": "conditions = {}\ndef get_condition(password):\n    if password not in conditions:\n        conditions[password] = Condition()\n    return conditions[password]\nclass PongPrivatePasswordMatchView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        password = request.data.get(\"password\")\n        if not password:",
        "detail": "matchmaking_microservice.mtcmkg_api.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "matchmaking_microservice.manage",
        "description": "matchmaking_microservice.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mtcmkg.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "matchmaking_microservice.manage",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "pong_frontend.node_modules.flatted.python.flatted",
        "description": "pong_frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "pong_frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "pong_frontend.node_modules.flatted.python.flatted",
        "description": "pong_frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "pong_frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "pong_frontend.node_modules.flatted.python.flatted",
        "description": "pong_frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "pong_frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "pong_frontend.node_modules.flatted.python.flatted",
        "description": "pong_frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "pong_frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "pong_frontend.node_modules.flatted.python.test",
        "description": "pong_frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "pong_frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.asgi",
        "description": "pong_game_microservice.pong_game.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": AuthMiddlewareStack(\n        URLRouter(\n            pong_game_ws.routing.websocket_urlpatterns\n        )\n    ),\n})",
        "detail": "pong_game_microservice.pong_game.asgi",
        "documentation": {}
    },
    {
        "label": "NoMigrations",
        "kind": 6,
        "importPath": "pong_game_microservice.pong_game.nomigrations",
        "description": "pong_game_microservice.pong_game.nomigrations",
        "peekOfCode": "class NoMigrations:\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):\n        return None\nMIGRATION_MODULES = NoMigrations()",
        "detail": "pong_game_microservice.pong_game.nomigrations",
        "documentation": {}
    },
    {
        "label": "MIGRATION_MODULES",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.nomigrations",
        "description": "pong_game_microservice.pong_game.nomigrations",
        "peekOfCode": "MIGRATION_MODULES = NoMigrations()",
        "detail": "pong_game_microservice.pong_game.nomigrations",
        "documentation": {}
    },
    {
        "label": "MIGRATION_MODULES",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "MIGRATION_MODULES = NoMigrations()\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-0@n&*t190%$-3nk#^r=#($te)ilh8_dps$odbwgj&5%kpj713n'\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-0@n&*t190%$-3nk#^r=#($te)ilh8_dps$odbwgj&5%kpj713n'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-0@n&*t190%$-3nk#^r=#($te)ilh8_dps$odbwgj&5%kpj713n'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-0@n&*t190%$-3nk#^r=#($te)ilh8_dps$odbwgj&5%kpj713n'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'channels',\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'channels',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'channels',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'daphne',\n    'channels',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'pong_game.urls'",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "ROOT_URLCONF = 'pong_game.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "ASGI_APPLICATION = 'pong_game.asgi.application'\nWSGI_APPLICATION = 'pong_game.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',  # Nome predefinito o il nome specificato su Supabase\n        'USER': 'postgres.ggbckomtbwupqqvjasap',  # Nome utente fornito da Supabase\n        'PASSWORD': 'GokuSuperSaiyan4',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "WSGI_APPLICATION = 'pong_game.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',  # Nome predefinito o il nome specificato su Supabase\n        'USER': 'postgres.ggbckomtbwupqqvjasap',  # Nome utente fornito da Supabase\n        'PASSWORD': 'GokuSuperSaiyan4',\n        'HOST': 'aws-0-eu-central-2.pooler.supabase.com',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',  # Nome predefinito o il nome specificato su Supabase\n        'USER': 'postgres.ggbckomtbwupqqvjasap',  # Nome utente fornito da Supabase\n        'PASSWORD': 'GokuSuperSaiyan4',\n        'HOST': 'aws-0-eu-central-2.pooler.supabase.com',\n        'PORT': '6543',\n    }\n}",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'pong_game_ws.PongUser'",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'pong_game_ws.PongUser'\nREST_FRAMEWORK = {",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'pong_game_ws.PongUser'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'pong_game_ws.PongUser'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'pong_game_ws.PongUser'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'pong_game_ws.PongUser'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': env('SIGNING_KEY'),\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'JTI_CLAIM': 'jti',",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.settings",
        "description": "pong_game_microservice.pong_game.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],  # Assicurati che Redis sia in esecuzione\n        },\n    },\n}",
        "detail": "pong_game_microservice.pong_game.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.urls",
        "description": "pong_game_microservice.pong_game.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n]",
        "detail": "pong_game_microservice.pong_game.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game.wsgi",
        "description": "pong_game_microservice.pong_game.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "pong_game_microservice.pong_game.wsgi",
        "documentation": {}
    },
    {
        "label": "PongGameWsConfig",
        "kind": 6,
        "importPath": "pong_game_microservice.pong_game_ws.apps",
        "description": "pong_game_microservice.pong_game_ws.apps",
        "peekOfCode": "class PongGameWsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'pong_game_ws'",
        "detail": "pong_game_microservice.pong_game_ws.apps",
        "documentation": {}
    },
    {
        "label": "GameConsumer",
        "kind": 6,
        "importPath": "pong_game_microservice.pong_game_ws.consumers",
        "description": "pong_game_microservice.pong_game_ws.consumers",
        "peekOfCode": "class GameConsumer(AsyncWebsocketConsumer):\n    games = {}  # Dizionario condiviso per memorizzare le istanze del gioco per ogni `game_id`\n    async def connect(self):\n        self.game_id = self.scope[\"url_route\"][\"kwargs\"][\"game_id\"]\n        self.room_group_name = f\"game_{self.game_id}\"\n        self.player_side = None  # Sarà assegnato come \"left\" o \"right\" dopo l'autenticazione\n        self.user = None  # Utente autenticato\n        self.game = None  # Istanza del gioco\n        # Accetta la connessione WebSocket per ricevere il token\n        await self.accept()",
        "detail": "pong_game_microservice.pong_game_ws.consumers",
        "documentation": {}
    },
    {
        "label": "PongUser",
        "kind": 6,
        "importPath": "pong_game_microservice.pong_game_ws.models",
        "description": "pong_game_microservice.pong_game_ws.models",
        "peekOfCode": "class PongUser(AbstractUser):\n    class Meta:\n        managed = False  # Evita che Django gestisca questa tabella\n        db_table = 'user_mgmt_api_ponguser'\n    otp_secret = models.CharField(max_length=32, blank=True, null=True)\n    trophies = models.IntegerField(default=0)\n    last_activity = models.DateTimeField(null=True, blank=True)\n    def __str__(self):\n        return self.username",
        "detail": "pong_game_microservice.pong_game_ws.models",
        "documentation": {}
    },
    {
        "label": "PongGame",
        "kind": 6,
        "importPath": "pong_game_microservice.pong_game_ws.pong",
        "description": "pong_game_microservice.pong_game_ws.pong",
        "peekOfCode": "class PongGame:\n    def __init__(self, game_id):\n        self.game_id = game_id\n        self.state = {\n            \"ball\": {\"x\": 400, \"y\": 300, \"dx\": 6, \"dy\": 0},\n            \"left_paddle\": {\"y\": 250},\n            \"right_paddle\": {\"y\": 250},\n            \"left_score\": 0,\n            \"right_score\": 0,\n        }",
        "detail": "pong_game_microservice.pong_game_ws.pong",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "pong_game_microservice.pong_game_ws.routing",
        "description": "pong_game_microservice.pong_game_ws.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    re_path(r\"ws/game/(?P<game_id>[a-f0-9\\-]+)/$\", consumers.GameConsumer.as_asgi()),\n]",
        "detail": "pong_game_microservice.pong_game_ws.routing",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pong_game_microservice.manage",
        "description": "pong_game_microservice.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pong_game.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "pong_game_microservice.manage",
        "documentation": {}
    },
    {
        "label": "BALL_SIZE",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "BALL_SIZE = 20\nPADDLE_WIDTH, PADDLE_HEIGHT = 20, 100\nBALL_SPEED = 6\nPADDLE_SPEED = 5\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n# Configurazione dello schermo\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Pong\")\n# Posizioni iniziali",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "BALL_SPEED",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "BALL_SPEED = 6\nPADDLE_SPEED = 5\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n# Configurazione dello schermo\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Pong\")\n# Posizioni iniziali\nball_x, ball_y = SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2\nball_dx, ball_dy = BALL_SPEED, 0",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "PADDLE_SPEED",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "PADDLE_SPEED = 5\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n# Configurazione dello schermo\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Pong\")\n# Posizioni iniziali\nball_x, ball_y = SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2\nball_dx, ball_dy = BALL_SPEED, 0\nleft_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n# Configurazione dello schermo\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Pong\")\n# Posizioni iniziali\nball_x, ball_y = SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2\nball_dx, ball_dy = BALL_SPEED, 0\nleft_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2\nright_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "BLACK = (0, 0, 0)\n# Configurazione dello schermo\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Pong\")\n# Posizioni iniziali\nball_x, ball_y = SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2\nball_dx, ball_dy = BALL_SPEED, 0\nleft_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2\nright_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2\n# Loop del gioco",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Pong\")\n# Posizioni iniziali\nball_x, ball_y = SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2\nball_dx, ball_dy = BALL_SPEED, 0\nleft_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2\nright_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2\n# Loop del gioco\nclock = pygame.time.Clock()\nleft_score = 0",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "left_paddle_y",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "left_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2\nright_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2\n# Loop del gioco\nclock = pygame.time.Clock()\nleft_score = 0\nright_score = 0\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "right_paddle_y",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "right_paddle_y = SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2\n# Loop del gioco\nclock = pygame.time.Clock()\nleft_score = 0\nright_score = 0\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "clock = pygame.time.Clock()\nleft_score = 0\nright_score = 0\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n    # Tasti premuti\n    keys = pygame.key.get_pressed()",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "left_score",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "left_score = 0\nright_score = 0\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n    # Tasti premuti\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_ESCAPE]:",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "right_score",
        "kind": 5,
        "importPath": "pongs.pong",
        "description": "pongs.pong",
        "peekOfCode": "right_score = 0\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n    # Tasti premuti\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_ESCAPE]:\n        pygame.quit()",
        "detail": "pongs.pong",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.asgi",
        "description": "user_menagement_microservice.user_mgmt.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "user_menagement_microservice.user_mgmt.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-@2kz(^lv3lnmhu*zb9x3*g=#d-4qk0ana8bqa3zth9+sbvht+#'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-@2kz(^lv3lnmhu*zb9x3*g=#d-4qk0ana8bqa3zth9+sbvht+#'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-@2kz(^lv3lnmhu*zb9x3*g=#d-4qk0ana8bqa3zth9+sbvht+#'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework_simplejwt',\n    'rest_framework_simplejwt.token_blacklist',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'user_mgmt.urls'",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "ROOT_URLCONF = 'user_mgmt.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "WSGI_APPLICATION = 'user_mgmt.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',  # Nome predefinito o il nome specificato su Supabase\n        'USER': 'postgres.ggbckomtbwupqqvjasap',  # Nome utente fornito da Supabase\n        'PASSWORD': 'GokuSuperSaiyan4',\n        'HOST': 'aws-0-eu-central-2.pooler.supabase.com',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',  # Nome predefinito o il nome specificato su Supabase\n        'USER': 'postgres.ggbckomtbwupqqvjasap',  # Nome utente fornito da Supabase\n        'PASSWORD': 'GokuSuperSaiyan4',\n        'HOST': 'aws-0-eu-central-2.pooler.supabase.com',\n        'PORT': '6543',\n    }\n}",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'user_mgmt_api.PongUser'",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'user_mgmt_api.PongUser'\nEMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'user_mgmt_api.PongUser'\nEMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'\nEMAIL_FILE_PATH = BASE_DIR / 'sent_emails'",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'user_mgmt_api.PongUser'\nEMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'\nEMAIL_FILE_PATH = BASE_DIR / 'sent_emails'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'user_mgmt_api.PongUser'\nEMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'\nEMAIL_FILE_PATH = BASE_DIR / 'sent_emails'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'user_mgmt_api.PongUser'\nEMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'\nEMAIL_FILE_PATH = BASE_DIR / 'sent_emails'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'\nEMAIL_FILE_PATH = BASE_DIR / 'sent_emails'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_FILE_PATH",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "EMAIL_FILE_PATH = BASE_DIR / 'sent_emails'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.settings",
        "description": "user_menagement_microservice.user_mgmt.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': env('SIGNING_KEY'),\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'JTI_CLAIM': 'jti',",
        "detail": "user_menagement_microservice.user_mgmt.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.urls",
        "description": "user_menagement_microservice.user_mgmt.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('user_mgmt_api.urls', namespace='user_mgmt_api')),\n]",
        "detail": "user_menagement_microservice.user_mgmt.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt.wsgi",
        "description": "user_menagement_microservice.user_mgmt.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "user_menagement_microservice.user_mgmt.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.migrations.0001_initial",
        "description": "user_menagement_microservice.user_mgmt_api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PongUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "user_menagement_microservice.user_mgmt_api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserMgmtApiConfig",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.apps",
        "description": "user_menagement_microservice.user_mgmt_api.apps",
        "peekOfCode": "class UserMgmtApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'user_mgmt_api'",
        "detail": "user_menagement_microservice.user_mgmt_api.apps",
        "documentation": {}
    },
    {
        "label": "UpdateLastActivityMixin",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.mixins",
        "description": "user_menagement_microservice.user_mgmt_api.mixins",
        "peekOfCode": "class UpdateLastActivityMixin():\n    def initialize_request(self, request, *args, **kwargs):\n        request = super().initialize_request(request, *args, **kwargs)\n        if request.user.is_authenticated:\n            request.user.last_activity = timezone.now()\n            request.user.save()\n        return request",
        "detail": "user_menagement_microservice.user_mgmt_api.mixins",
        "documentation": {}
    },
    {
        "label": "PongUser",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.models",
        "description": "user_menagement_microservice.user_mgmt_api.models",
        "peekOfCode": "class PongUser(AbstractUser):\n    otp_secret = models.CharField(max_length=32, blank=True, null=True)\n    trophies = models.IntegerField(default=0)\n    last_activity = models.DateTimeField(null=True, blank=True)\n    def __str__(self):\n        return self.username\n# Create your models here.",
        "detail": "user_menagement_microservice.user_mgmt_api.models",
        "documentation": {}
    },
    {
        "label": "PongUserSerializer",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.serializers",
        "description": "user_menagement_microservice.user_mgmt_api.serializers",
        "peekOfCode": "class PongUserSerializer(serializers.ModelSerializer):\n    username = serializers.CharField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    email = serializers.EmailField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    current_password = serializers.CharField(write_only=True, required=False)",
        "detail": "user_menagement_microservice.user_mgmt_api.serializers",
        "documentation": {}
    },
    {
        "label": "PongRegisterSerializer",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.serializers",
        "description": "user_menagement_microservice.user_mgmt_api.serializers",
        "peekOfCode": "class PongRegisterSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    username = serializers.CharField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])",
        "detail": "user_menagement_microservice.user_mgmt_api.serializers",
        "documentation": {}
    },
    {
        "label": "PongLoginSerializer",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.serializers",
        "description": "user_menagement_microservice.user_mgmt_api.serializers",
        "peekOfCode": "class PongLoginSerializer(serializers.Serializer):\n    username = serializers.CharField(required=True)\n    password = serializers.CharField(required=True)\nclass VerifyOTPSerializer(serializers.Serializer):\n    email = serializers.EmailField(required=True)\n    otp_code = serializers.CharField(required=True, max_length=6)",
        "detail": "user_menagement_microservice.user_mgmt_api.serializers",
        "documentation": {}
    },
    {
        "label": "VerifyOTPSerializer",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.serializers",
        "description": "user_menagement_microservice.user_mgmt_api.serializers",
        "peekOfCode": "class VerifyOTPSerializer(serializers.Serializer):\n    email = serializers.EmailField(required=True)\n    otp_code = serializers.CharField(required=True, max_length=6)",
        "detail": "user_menagement_microservice.user_mgmt_api.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt_api.serializers",
        "description": "user_menagement_microservice.user_mgmt_api.serializers",
        "peekOfCode": "User = get_user_model()\nclass PongUserSerializer(serializers.ModelSerializer):\n    username = serializers.CharField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    email = serializers.EmailField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )",
        "detail": "user_menagement_microservice.user_mgmt_api.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt_api.urls",
        "description": "user_menagement_microservice.user_mgmt_api.urls",
        "peekOfCode": "app_name = 'user_mgmt_api'\nurlpatterns = [\n    path('login/', PongLoginView.as_view(), name='login'),\n    path('logout/', PongLogoutView.as_view(), name='logout'),\n    path('register/', PongRegisterView.as_view(), name='register'),\n    path('profile/', PongProfileView.as_view(), name='profile'),\n    path('user_list/', PongUserListView.as_view(), name='user_list'),\n    path('user/<str:username>/', PongUserView.as_view(), name='user_detail'),\n    path('token_refresh/', PongRefreshTokenView.as_view(), name='token_refresh'),\n    path('verify-otp/', VerifyOTPView.as_view(), name='verify_otp'),",
        "detail": "user_menagement_microservice.user_mgmt_api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt_api.urls",
        "description": "user_menagement_microservice.user_mgmt_api.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', PongLoginView.as_view(), name='login'),\n    path('logout/', PongLogoutView.as_view(), name='logout'),\n    path('register/', PongRegisterView.as_view(), name='register'),\n    path('profile/', PongProfileView.as_view(), name='profile'),\n    path('user_list/', PongUserListView.as_view(), name='user_list'),\n    path('user/<str:username>/', PongUserView.as_view(), name='user_detail'),\n    path('token_refresh/', PongRefreshTokenView.as_view(), name='token_refresh'),\n    path('verify-otp/', VerifyOTPView.as_view(), name='verify_otp'),\n]",
        "detail": "user_menagement_microservice.user_mgmt_api.urls",
        "documentation": {}
    },
    {
        "label": "PongRegisterView",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "class PongRegisterView(APIView):\n    def post(self, request):\n        serializer = PongRegisterSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.save()\n        user.otp_secret = pyotp.random_base32()\n        user.save()\n        totp = pyotp.TOTP(user.otp_secret)\n        otp_code = totp.now()\n        print(f\"Generated OTP: {otp_code}\")",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "PongLoginView",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "class PongLoginView(APIView):\n    def post(self, request):\n        serializer = PongLoginSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        username = serializer.validated_data['username']\n        password = serializer.validated_data['password']\n        user = authenticate(request, username=username, password=password)\n        if user is None:\n            return Response(\n                {\"detail\": \"invalid credentials\"},",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "PongLogoutView",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "class PongLogoutView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        request.user.auth_token.delete()\n        return Response(status=status.HTTP_200_OK)\nclass PongProfileView(UpdateLastActivityMixin, RetrieveUpdateDestroyAPIView):\n    serializer_class = PongUserSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        return self.request.user",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "PongProfileView",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "class PongProfileView(UpdateLastActivityMixin, RetrieveUpdateDestroyAPIView):\n    serializer_class = PongUserSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        return self.request.user\nclass PongUserView(UpdateLastActivityMixin, RetrieveAPIView):\n    serializer_class = PongUserSerializer\n    permission_classes = [IsAuthenticated]\n    queryset = User.objects.all()\n    lookup_field = 'username'",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "PongUserView",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "class PongUserView(UpdateLastActivityMixin, RetrieveAPIView):\n    serializer_class = PongUserSerializer\n    permission_classes = [IsAuthenticated]\n    queryset = User.objects.all()\n    lookup_field = 'username'\nclass PongUserListView(UpdateLastActivityMixin, ListAPIView):\n    serializer_class = PongUserSerializer\n    permission_classes = [IsAuthenticated]\n    queryset = User.objects.all()\n    def get(self, request, *args, **kwargs):",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "PongUserListView",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "class PongUserListView(UpdateLastActivityMixin, ListAPIView):\n    serializer_class = PongUserSerializer\n    permission_classes = [IsAuthenticated]\n    queryset = User.objects.all()\n    def get(self, request, *args, **kwargs):\n        response = super().get(request, *args, **kwargs)\n        print(f\"User list requested by {request.user}\")\n        return response\nclass VerifyOTPView(APIView):\n    def post(self, request):",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "VerifyOTPView",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "class VerifyOTPView(APIView):\n    def post(self, request):\n        serializer = VerifyOTPSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        email = serializer.validated_data['email']\n        otp_code = serializer.validated_data['otp_code']\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:\n            return Response(",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "PongRefreshTokenView",
        "kind": 6,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "class PongRefreshTokenView(UpdateLastActivityMixin, TokenRefreshView):\n    pass",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "user_menagement_microservice.user_mgmt_api.views",
        "description": "user_menagement_microservice.user_mgmt_api.views",
        "peekOfCode": "User = get_user_model()\nclass PongRegisterView(APIView):\n    def post(self, request):\n        serializer = PongRegisterSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.save()\n        user.otp_secret = pyotp.random_base32()\n        user.save()\n        totp = pyotp.TOTP(user.otp_secret)\n        otp_code = totp.now()",
        "detail": "user_menagement_microservice.user_mgmt_api.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "user_menagement_microservice.manage",
        "description": "user_menagement_microservice.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'user_mgmt.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "user_menagement_microservice.manage",
        "documentation": {}
    }
]